{"version":3,"sources":["webpack:///./src/components/subnav.js","webpack:///./src/components/sidenav.js","webpack:///./src/components/CodeBlock.js","webpack:///./src/components/ToggleCodeBlock.js","webpack:///./src/components/PaginationLinkPrev.js","webpack:///./src/components/ButtonDropdownWrapper.js","webpack:///./src/templates/mdTemplate.js"],"names":["subnav_Subnav","Subnav","props","_this","_React$Component","call","this","toggle","bind","assertThisInitialized_default","state","dropdownOpen","setState","prevState","render","_this$props","files","nameEn","nameFr","path","i18n","sortedFiles","sort","a","b","parseInt","node","frontmatter","subnav","split","react_default","createElement","reactstrap_es","W","X","onClick","className","style","border","font-size","font-family","margin-top","margin-bottom","font-weight","id","language","C","isOpen","map","edges","lang","active","padding-left","gatsby_browser_entry","to","activeStyle","color","backgroundColor","title","Component","components_subnav","Object","es","components_sidenav","query","data","subNameEn","subNameFr","subGroup","subPieces","forEach","push","length","fb","vertical","_4163922871","CodeBlock_CodeBlock","CodeBlock","output","defaultOutput","isShowingCode","copyText","changeOutput","copy","n","value","_this2","D","xb","display","background-color","B","md","g","e","border-bottom-color","react_copy_to_clipboard_lib","CopyToClipboard","text","html","react","t","width","lib","PrismCode","propTypes","prop_types_default","string","bool","defaultProps","components_CodeBlock","ToggleCodeBlock_ToggleCodeBlock","ToggleCodeBlock","_CodeBlock","returnButton","height","padding","textAlign","fontSize","fontWeight","marginRight","size","V","components_ToggleCodeBlock","aria-label","children","cssModule","object","next","previous","tag","oneOfType","func","PaginationLinkPrev_PaginationLinkPrev","Tag","attributes","objectWithoutProperties_default","classes","utils","classnames_default","ariaLabel","Array","isArray","href","aria-hidden","key","assign","components_PaginationLinkPrev","j","ButtonDropdownWrapper_ButtonDropdownWrapper","ButtonDropdownWrapper","f","direction","marginBottom","I","caret","H","G","components_ButtonDropdownWrapper","_ref","eng","fr","renderAst","rehype_react_default","components","paginationlinkprev","togglecodeblock","codeblock","mdbuttondropdown","alert","badge","breadcrumb","c","breadcrumbitem","d","button","buttondropdown","buttongroup","buttontoolbar","h","card","i","cardblock","cardbody","k","cardcolumns","l","carddeck","m","cardfooter","cardgroup","o","cardheader","p","cardimg","q","cardimgoverlay","r","cardlink","s","cardsubtitle","cardtext","u","cardtitle","v","carousel","w","carouselcaption","x","carouselcontrol","y","carouselindicators","z","carouselitem","A","mdcol","collapse","container","custominput","E","dropdown","F","dropdownitem","dropdownmenu","dropdowntoggle","fade","J","form","K","formfeedback","L","formgroup","M","formtext","N","input","O","inputgroup","P","inputgroupaddon","Q","inputgroupbutton","R","inputgroupbuttondropdown","S","inputgrouptext","T","jumbotron","U","label","listgroup","listgroupitem","listgroupitemheading","Y","listgroupitemtext","Z","media","ab","modal","bb","modalbody","cb","modalfooter","db","modalheader","eb","nav","navbar","jb","navbarbrand","kb","navbartoggler","lb","navdropdown","gb","navitem","hb","navlink","ib","pagination","mb","paginationitem","nb","paginationlink","ob","popover","pb","popoverbody","qb","popovercontent","rb","popoverheader","sb","popovertitle","tb","poppercontent","ub","poppertargethelper","vb","progress","wb","row","tabcontent","yb","table","Ab","tabpane","zb","tooltip","Bb","uncontrolledalert","Cb","uncontrolledbuttondropdown","Db","uncontrolledcarousel","Eb","uncontrolledcollapse","Fb","uncontrolleddropdown","Gb","uncontrollednavdropdown","Hb","uncontrolledtooltip","Ib","Compiler","layout","xs","htmlAst","pageQuery"],"mappings":"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","file":"component---src-templates-md-template-js-f87982c73a9f15fee692.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport {\n\tCollapse,\n\tListGroup,\n\tListGroupItem\n} from 'reactstrap';\nimport { translate } from \"react-i18next\";\nimport './subnav.scss'\n\nclass Subnav extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.toggle = this.toggle.bind(this);\n\t\tthis.state = {\n\t\t\tdropdownOpen: true\n\t\t};\n\t}\n\n\ttoggle() {\n\t\tthis.setState(prevState => ({\n\t\t\tdropdownOpen: !prevState.dropdownOpen\n\t\t}));\n\t}\n\trender() {\n\t\tconst {\n\t\t\tfiles,\n\t\t\tnameEn,\n\t\t\tnameFr,\n\t\t\tpath,\n\t\t\ti18n, } = this.props;\n\n\t\tconst sortedFiles = files.sort((a, b) =>\n\t\t\tparseInt(a.node.frontmatter.subnav.split('/')[3], 10) - parseInt(b.node.frontmatter.subnav.split('/')[3], 10))\n\t\t\t;\n\t\treturn (\n\t\t\t<ListGroup>\n\t\t\t\t<ListGroupItem onClick={this.toggle} className=\"dropdown-toggle\" style={{\"border\": \"0px\", \"font-size\":\"1.3125em\", \"font-family\": \"'Nunito Sans', sans-serif\", \"margin-top\": \"5px\", \"margin-bottom\": \"5px\", \"font-weight\": \"600\"}} id='listGroupItem'>\n\t\t\t\t\t{(i18n.language === \"en\") ? nameEn : nameFr}\n\t\t\t\t</ListGroupItem>\n\t\t\t\t<Collapse isOpen={this.state.dropdownOpen}>\n\t\t\t\t\t{sortedFiles.map((edges) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t((i18n.language === \"en\") && (edges.node.frontmatter.lang === \"en\")) ||\n\t\t\t\t\t\t\t((i18n.language === \"fr\") && (edges.node.frontmatter.lang === \"fr\"))\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ListGroupItem id='listGroupItem' active={path === edges.node.frontmatter.path} style={{ \"padding-left\": \"2rem\",  \"border\": \"0px\"}}>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tid=\"link\"\n\t\t\t\t\t\t\t\t\t\tto={edges.node.frontmatter.path}\n\t\t\t\t\t\t\t\t\t\tactiveStyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"#467B8D\"\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{edges.node.frontmatter.title}\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</ListGroupItem>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</Collapse>\n\t\t\t</ListGroup>\n\t\t);\n\t}\n}\nexport default translate(\"default\")(Subnav);\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport {\n  Nav,\n} from 'reactstrap';\nimport Subnav from './subnav';\nimport { translate } from \"react-i18next\";\nimport \"./sidenav.scss\"\n\nconst Sidenav = (props) => (\n  <StaticQuery query={graphql`\n        query{\n          component:allMarkdownRemark(\n            filter: {\n              frontmatter: {path: {regex: \"/\\/component\\//\"}}\n            },\n            sort:{\n              fields:[frontmatter___subnav]\n            }\n          ){\n            totalCount\n              edges{\n                node {\n                  frontmatter {\n                    title\n                    path\n                    lang\n                    subnav\n                  }\n                }\n            }\n          }\n          overview:allMarkdownRemark(\n            filter: \n              {frontmatter: {path: {regex: \"/\\/overview\\//\"}}\n            },\n            sort:{\n              fields:[frontmatter___subnav]\n            }\n          ){\n            totalCount\n              edges{\n                node {\n                  frontmatter {\n                    title\n                    path\n                    lang\n                    subnav\n                  }\n                }\n            }\n          }\n          content:allMarkdownRemark(\n            filter: \n            {frontmatter: {path: {regex: \"/\\/content\\//\"}}\n            },\n            sort:{\n              fields:[frontmatter___subnav]\n            }\n          ) {\n            totalCount\n              edges{\n                node {\n                  frontmatter {\n                    title\n                    path\n                    lang\n                    subnav\n                  }\n                }\n            }\n          }\n          identity:allMarkdownRemark(\n            filter: {\n              frontmatter: {path: {regex: \"/\\/identity\\//\"}}\n            },\n            sort:{\n              fields:[frontmatter___subnav]\n            }\n          ) {\n            totalCount\n              edges{\n                node {\n                  frontmatter {\n                    title\n                    path\n                    lang\n                    subnav\n                  }\n                }\n            }\n          }\n          data:allMarkdownRemark(\n            filter: {\n              frontmatter: {path: {regex: \"/\\/data\\//\"}}\n            },\n            sort:{\n              fields:[frontmatter___subnav]\n            }\n          ){\n            totalCount\n              edges{\n                node {\n                  frontmatter {\n                    title\n                    path\n                    lang\n                    subnav\n                  }\n                }\n            }\n          }\n        }\n    `}\n    render={(data) => {\n\n      let subNameEn = \"\";\n      let subNameFr = \"\";\n      let subGroup = [];\n      let subPieces = [];\n      data[props.path.split(\"/\")[1]].edges.forEach((edges) => {\n        if (edges.node.frontmatter.subnav.split(\"/\")[1] !== subNameEn) {\n          if (subNameEn !== \"\") {\n            subPieces.push(\n              <Subnav\n                files={subGroup}\n                nameEn={subNameEn}\n                nameFr={subNameFr}\n                path={props.path}\n              />\n            );\n          }\n          subGroup = [];\n          subNameEn = edges.node.frontmatter.subnav.split(\"/\")[1];\n          subNameFr = edges.node.frontmatter.subnav.split(\"/\")[2];\n        }\n        subGroup.push(edges);\n      });\n      if (subGroup.push.length !== 0) {\n        subPieces.push(\n          <Subnav\n            files={subGroup}\n            nameEn={subNameEn}\n            nameFr={subNameFr}\n            path={props.path}\n          />\n        );\n      }\n      return (\n        <div>\n          <Nav vertical id=\"sidenav\"> <h4 id = \"title\">Components</h4>\n            {subPieces}\n          </Nav>\n        </div>\n      )\n    }}\n  /> \n);\n\nexport default translate(\"default\")(Sidenav);\n\n","import React from 'react';\nimport { Button, ButtonGroup, Row, Col, Container } from 'reactstrap';\nimport 'prismjs';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/themes/prism.css';\nimport { PrismCode } from 'react-prism';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport PropTypes from 'prop-types';\nimport { translate } from \"react-i18next\";\n\n/** Component that holds code in html and react/jsx with the ability to copy the code */\nclass CodeBlock extends React.Component {\n  /**\n   * Take the inputs as well as initialize the needed state.\n   * @param {props} { defaultOutput, html, react, isShowingCode } - The props not counting the i18n props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      output: (this.props.defaultOutput === undefined || this.props.defaultOutput === \"react\") ? \"react\" : \"html\",\n      isShowingCode: this.props.isShowingCode,\n      copyText: \"COPY CODE\"\n    }\n\n    this.changeOutput = this.changeOutput.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  /**\n   * Change the value of the copy button once clicked via this.state.copyText.\n   */\n  copy() {\n    this.setState({ copyText: \"Copied!\" });\n  }\n\n  /**\n   * Change the output of the code box between the supplied values for html and react.\n   * @param {string} value - \"html\" or \"react\"\n   */\n  changeOutput(value) {\n    if (this.state.output !== value) {\n      this.setState({ output: value });\n      if (this.state.copyText === \"Copied!\") {\n        this.setState({ copyText: \"COPY CODE\" });\n      }\n    }\n  }\n\n  /**\n   * Render the codeblock as a bootstrap row (please let Addison know if this is not ideal).\n   * @return {<jsx>} The component.\n   */\n  render() {\n    return (\n      <Container>\n        <Row className=\"codeblock\" style={(this.props.isShowingCode) ? { \"display\": \"flex\", \"background-color\": \"white\" } : { \"display\": \"none\", \"background-color\": \"white\" }}>\n          <Col md=\"9\">\n            <ButtonGroup className=\"float-left\">\n              <Button\n                onClick={() => this.changeOutput(\"html\")}\n                style={(this.state.output === \"html\") ? { \"background-color\": \"white\", \"border-bottom-color\": \"#5DC1BE\" } : { \"background-color\": \"white\" }}\n                color=\"default\"\n              >\n                HTML\n                        </Button>\n              <Button\n                onClick={() => this.changeOutput(\"react\")}\n                style={(!(this.state.output === \"html\")) ? { \"background-color\": \"white\", \"border-bottom-color\": \"#5DC1BE\" } : { \"background-color\": \"white\" }}\n                color=\"default\"\n              >\n                REACT\n                        </Button>\n            </ButtonGroup>\n          </Col>\n          <Col md=\"3\">\n            <CopyToClipboard text={(this.state.output === \"html\") ? this.props.html : this.props.react}>\n              <Button onClick={this.copy} style={{ \"background-color\": \"white\", \"color\": \"black\" }} className=\"float-right\">\n                {this.props.t(this.state.copyText)}\n              </Button>\n            </CopyToClipboard>\n          </Col>\n          <Col md=\"12\" style={{ \"width\": \"100%\" }}>\n            <pre>\n              <PrismCode className={(this.state.output === \"html\") ? \"language-html\" : \"language-jsx\"}>\n                {(this.state.output === \"html\") ? this.props.html : this.props.react}\n              </PrismCode>\n            </pre>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\n\nCodeBlock.propTypes = {\n  defaultOutput: PropTypes.string,\n  html: PropTypes.string,\n  react: PropTypes.string,\n  isShowingCode: PropTypes.bool\n};\n\nCodeBlock.defaultProps = {\n  defaultOutput: \"react\",\n  isShowingCode: true\n}\n\n\nexport default translate(\"CodeBlock\")(CodeBlock);","import React from 'react';\nimport { Button, Row, Label, Container } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { translate } from \"react-i18next\";\nimport CodeBlock from './CodeBlock';\n\n/** Component that extends the functionality of CodeBlock by adding the option to hide/show the CodeBlock component */\nclass ToggleCodeBlock extends CodeBlock {\n    /**\n     * Take the inputs as well as initialize the needed state.\n     * @param {props} { defaultOutput, html, react, isShowingCode } - The props not counting the i18n props\n     */\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            isShowingCode: false\n        }\n\n        this.toggle = this.toggle.bind(this);\n        this.returnButton = this.returnButton.bind(this);\n    }\n\n    /**\n     * Toggle between showing the CodeBlock element and not showing the CodeBlock element\n     */\n    toggle() {\n        this.setState(prevState => ({\n            isShowingCode: !prevState.isShowingCode\n        }));\n    }\n\n    /**\n     * Generates the SHOW CODE / HIDE CODE button in order to not cluter the render() code.\n     * @return {<jsx>} The show/hide button and its label\n     */\n    returnButton() {\n        return(\n            <div>\n                <Button \n                    onClick={ this.toggle } \n                    style={ \n                        {\n                            \"width\": \"30px\",\n                            \"height\": \"30px\",\n                            \"padding\": \"0px 0px 5px 0px\",\n                            \"textAlign\": \"center\",\n                            \"fontSize\": \"20px\",\n                            \"fontWeight\": \"900\",\n                            \"marginRight\": \"15px\"\n                        } \n                    } \n                    size=\"sm\"\n                    color=\"info\">\n                    { (this.state.isShowingCode) ? \"-\" : \"+\" }\n                </Button>\n                <Label onClick={ this.toggle } >\n                    { this.props.t((this.state.isShowingCode) ? \"HIDE CODE\" : \"SHOW CODE\") }\n                </Label>\n            </div>\n        );\n    }\n\n    /**\n     * Renders the CodeBlock as well as the SHOW CODE / HIDE CODE button in the correct location.\n     * @return {<jsx>} A CodeBlock element with an associated show/hide button.\n     */\n    render() {\n        return (\n          <Container>\n            <Row>\n                { (!this.state.isShowingCode) ? this.returnButton() : <div></div> }\n                <CodeBlock \n                    html={ this.props.html } \n                    react={ this.props.react } \n                    defaultOutput={ this.props.defaultOutput }\n                    isShowingCode={ this.state.isShowingCode }\n                />\n                { (this.state.isShowingCode) ? this.returnButton() : <div></div> }\n            </Row>\n          </Container>\n        );\n    }\n}\n\nToggleCodeBlock.propTypes = {\n    defaultOutput: PropTypes.string,\n    html: PropTypes.string,\n    react: PropTypes.string,\n    isShowingCode: PropTypes.bool\n}\n\nToggleCodeBlock.defaultProps = {\n    defaultOutput: \"html\",\n    isShowingCode: false\n}\n\nexport default translate(\"CodeBlock\")(ToggleCodeBlock);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules } from '../../node_modules/reactstrap/src/utils';\n\nconst propTypes = {\n    'aria-label': PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    next: PropTypes.bool,\n    previous: PropTypes.bool,\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n};\n\nconst defaultProps = {\n    tag: 'a',\n};\n\nconst PaginationLinkPrev = (props) => {\n    let {\n        className,\n        cssModule,\n        next,\n        previous,\n        tag: Tag,\n        ...attributes\n    } = props;\n\n    const classes = mapToCssModules(classNames(\n        className,\n        'page-link'\n    ), cssModule);\n\n    let defaultAriaLabel = 'Previous';\n\n    const ariaLabel = props['aria-label'] || defaultAriaLabel;\n\n    let defaultCaret = '\\u00ab';\n\n    let children = props.children;\n    if (children && Array.isArray(children) && children.length === 0) {\n        children = null;\n    }\n\n    if (!attributes.href && Tag === 'a') {\n        Tag = 'button';\n    }\n\n    children = [\n        <span\n            aria-hidden=\"true\"\n            key=\"caret\"\n        >\n            {children || defaultCaret}\n        </span>,\n        <span\n            className=\"sr-only\"\n            key=\"sr\"\n        >\n            {ariaLabel}\n        </span>,\n    ];\n\n    return (\n        <Tag\n            {...attributes}\n            className={classes}\n            aria-label={ariaLabel}\n        >\n            {children}\n        </Tag>\n    );\n};\n\nPaginationLinkPrev.propTypes = propTypes;\nPaginationLinkPrev.defaultProps = defaultProps;\n\nexport default PaginationLinkPrev;","import React, { Component } from 'react';\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { translate } from 'react-i18next';\n\nclass ButtonDropdownWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n\n  render() {\n    return (\n      <ButtonDropdown direction=\"down\" isOpen={this.state.dropdownOpen} toggle={this.toggle} style={{marginBottom: '15px'}} color={this.props.color}>\n        <DropdownToggle caret {...this.props}>\n          Reply\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem>Action 1</DropdownItem>\n          <DropdownItem>Action 2</DropdownItem>\n          <DropdownItem>Action 3</DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    );\n  }\n}\n\nexport default translate('ButtonDropdownWrapper')(ButtonDropdownWrapper);\n","import React from 'react';\nimport rehypeReact from 'rehype-react';\nimport * as reactstrap from 'reactstrap';\nimport { graphql } from 'gatsby';\nimport { Row, Col } from 'reactstrap';\nimport { translate } from 'react-i18next';\n\nimport Sidenav from '../components/sidenav';\nimport Layout from '../components/layout';\nimport ToggleCodeBlock from '../components/ToggleCodeBlock';\nimport CodeBlock from '../components/CodeBlock';\nimport PaginationLinkPrev from '../components/PaginationLinkPrev';\n/* Import wrappers for embedding state-dependent components in markdown */\nimport ButtonDropdownWrapper from '../components/ButtonDropdownWrapper';\n\nconst Template = ({\n  data, // this prop will be injected by the GraphQL query below.\n  i18n }) => {\n  const { eng, fr } = data;\n  const { frontmatter: { path } } = eng;\n  const renderAst = new rehypeReact({\n    createElement: React.createElement,\n    components: {\n      paginationlinkprev: PaginationLinkPrev, togglecodeblock: ToggleCodeBlock, codeblock: CodeBlock, mdbuttondropdown: ButtonDropdownWrapper, alert: reactstrap.Alert, badge: reactstrap.Badge, breadcrumb: reactstrap.Breadcrumb, breadcrumbitem: reactstrap.BreadcrumbItem, button: reactstrap.Button, buttondropdown: reactstrap.ButtonDropdown, buttongroup: reactstrap.ButtonGroup, buttontoolbar: reactstrap.ButtonToolbar, card: reactstrap.Card, cardblock: reactstrap.CardBlock, cardbody: reactstrap.CardBody, cardcolumns: reactstrap.CardColumns, carddeck: reactstrap.CardDeck, cardfooter: reactstrap.CardFooter, cardgroup: reactstrap.CardGroup, cardheader: reactstrap.CardHeader, cardimg: reactstrap.CardImg, cardimgoverlay: reactstrap.CardImgOverlay, cardlink: reactstrap.CardLink, cardsubtitle: reactstrap.CardSubtitle, cardtext: reactstrap.CardText, cardtitle: reactstrap.CardTitle, carousel: reactstrap.Carousel, carouselcaption: reactstrap.CarouselCaption, carouselcontrol: reactstrap.CarouselControl, carouselindicators: reactstrap.CarouselIndicators, carouselitem: reactstrap.CarouselItem, mdcol: reactstrap.Col, collapse: reactstrap.Collapse, container: reactstrap.Container, custominput: reactstrap.CustomInput, dropdown: reactstrap.Dropdown, dropdownitem: reactstrap.DropdownItem, dropdownmenu: reactstrap.DropdownMenu, dropdowntoggle: reactstrap.DropdownToggle, fade: reactstrap.Fade, form: reactstrap.Form, formfeedback: reactstrap.FormFeedback, formgroup: reactstrap.FormGroup, formtext: reactstrap.FormText, input: reactstrap.Input, inputgroup: reactstrap.InputGroup, inputgroupaddon: reactstrap.InputGroupAddon, inputgroupbutton: reactstrap.InputGroupButton, inputgroupbuttondropdown: reactstrap.InputGroupButtonDropdown, inputgrouptext: reactstrap.InputGroupText, jumbotron: reactstrap.Jumbotron, label: reactstrap.Label, listgroup: reactstrap.ListGroup, listgroupitem: reactstrap.ListGroupItem, listgroupitemheading: reactstrap.ListGroupItemHeading, listgroupitemtext: reactstrap.ListGroupItemText, media: reactstrap.Media, modal: reactstrap.Modal, modalbody: reactstrap.ModalBody, modalfooter: reactstrap.ModalFooter, modalheader: reactstrap.ModalHeader, nav: reactstrap.Nav, navbar: reactstrap.Navbar, navbarbrand: reactstrap.NavbarBrand, navbartoggler: reactstrap.NavbarToggler, navdropdown: reactstrap.NavDropdown, navitem: reactstrap.NavItem, navlink: reactstrap.NavLink, pagination: reactstrap.Pagination, paginationitem: reactstrap.PaginationItem, paginationlink: reactstrap.PaginationLink, popover: reactstrap.Popover, popoverbody: reactstrap.PopoverBody, popovercontent: reactstrap.PopoverContent, popoverheader: reactstrap.PopoverHeader, popovertitle: reactstrap.PopoverTitle, poppercontent: reactstrap.PopperContent, poppertargethelper: reactstrap.PopperTargetHelper, progress: reactstrap.Progress, row: reactstrap.Row, tabcontent: reactstrap.TabContent, table: reactstrap.Table, tabpane: reactstrap.TabPane, tooltip: reactstrap.Tooltip, uncontrolledalert: reactstrap.UncontrolledAlert, uncontrolledbuttondropdown: reactstrap.UncontrolledButtonDropdown, uncontrolledcarousel: reactstrap.UncontrolledCarousel, uncontrolledcollapse: reactstrap.UncontrolledCollapse, uncontrolleddropdown: reactstrap.UncontrolledDropdown, uncontrollednavdropdown: reactstrap.UncontrolledNavDropdown, uncontrolledtooltip: reactstrap.UncontrolledTooltip,\n    },\n  }).Compiler;\n  return (\n    <Layout>\n      <Row>\n        <Col xs=\"3\">\n          <Sidenav path={path} />\n        </Col>\n        <Col>\n          {(i18n.language === \"en\" || fr === null) ?\n            <div className=\"col-sm\">{renderAst(eng.htmlAst)}</div> :\n            <div className=\"col-sm\">{renderAst(fr.htmlAst)}</div>\n          }\n        </Col>\n      </Row>\n    </Layout>\n  );\n}\n\nexport default translate(\"default\")(Template);\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    eng:markdownRemark(frontmatter: { path: { eq: $path }, lang: {eq: \"en\"} }) {\n      html\n      htmlAst\n      frontmatter {\n        path\n        lang\n      }\n    }\n    fr:markdownRemark(frontmatter: { path: { eq: $path }, lang: {eq: \"fr\"} }) {\n      html\n      htmlAst\n      frontmatter {\n        path\n        lang\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}